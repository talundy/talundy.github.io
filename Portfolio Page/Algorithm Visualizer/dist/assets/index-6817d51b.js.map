{"version":3,"file":"index-6817d51b.js","sources":["../../node_modules/react/cjs/react-jsx-runtime.production.min.js","../../node_modules/react/jsx-runtime.js","../../node_modules/react-dom/client.js","../../src/algorithms/mergeSort.ts","../../src/algorithms/index.ts","../../src/player/player.ts","../../src/renderers/svgRenderer.ts","../../src/utils/arrayGenerators.ts","../../src/components/AlgorithmVisualizer.tsx","../../src/main.tsx"],"sourcesContent":["/**\n * @license React\n * react-jsx-runtime.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';var f=require(\"react\"),k=Symbol.for(\"react.element\"),l=Symbol.for(\"react.fragment\"),m=Object.prototype.hasOwnProperty,n=f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,p={key:!0,ref:!0,__self:!0,__source:!0};\nfunction q(c,a,g){var b,d={},e=null,h=null;void 0!==g&&(e=\"\"+g);void 0!==a.key&&(e=\"\"+a.key);void 0!==a.ref&&(h=a.ref);for(b in a)m.call(a,b)&&!p.hasOwnProperty(b)&&(d[b]=a[b]);if(c&&c.defaultProps)for(b in a=c.defaultProps,a)void 0===d[b]&&(d[b]=a[b]);return{$$typeof:k,type:c,key:e,ref:h,props:d,_owner:n.current}}exports.Fragment=l;exports.jsx=q;exports.jsxs=q;\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-jsx-runtime.production.min.js');\n} else {\n  module.exports = require('./cjs/react-jsx-runtime.development.js');\n}\n","'use strict';\n\nvar m = require('react-dom');\nif (process.env.NODE_ENV === 'production') {\n  exports.createRoot = m.createRoot;\n  exports.hydrateRoot = m.hydrateRoot;\n} else {\n  var i = m.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n  exports.createRoot = function(c, o) {\n    i.usingClientEntryPoint = true;\n    try {\n      return m.createRoot(c, o);\n    } finally {\n      i.usingClientEntryPoint = false;\n    }\n  };\n  exports.hydrateRoot = function(c, h, o) {\n    i.usingClientEntryPoint = true;\n    try {\n      return m.hydrateRoot(c, h, o);\n    } finally {\n      i.usingClientEntryPoint = false;\n    }\n  };\n}\n","import { Algorithm, AlgorithmInput, AlgorithmMetadata, Operation, ValidationError } from '../types/algorithm';\n\nexport class MergeSort implements Algorithm {\n  metadata: AlgorithmMetadata = {\n    name: 'Merge Sort',\n    description: 'A divide-and-conquer algorithm that recursively splits the array, sorts the subarrays, and merges them back together.',\n    timeComplexity: {\n      best: 'O(n log n)',\n      average: 'O(n log n)',\n      worst: 'O(n log n)'\n    },\n    spaceComplexity: 'O(n)',\n    stable: true,\n    inPlace: false\n  };\n\n  validate(input: AlgorithmInput): ValidationError[] {\n    const errors: ValidationError[] = [];\n    \n    if (!input.array || input.array.length === 0) {\n      errors.push({ field: 'array', message: 'Array must not be empty' });\n    }\n    \n    if (input.array && input.array.some(val => typeof val !== 'number' || !Number.isFinite(val))) {\n      errors.push({ field: 'array', message: 'Array must contain only finite numbers' });\n    }\n    \n    return errors;\n  }\n\n  *trace(input: AlgorithmInput): Generator<Operation> {\n    const array = [...input.array];\n    const n = array.length;\n    \n    if (n <= 1) {\n      yield { type: 'mark', indices: [0], state: 'sorted' };\n      return;\n    }\n\n    yield* this.mergeSortTrace(array, 0, n - 1);\n  }\n\n  private *mergeSortTrace(array: number[], left: number, right: number): Generator<Operation> {\n    if (left < right) {\n      const mid = Math.floor((left + right) / 2);\n      \n      // Mark the split point\n      yield { type: 'split', indices: [mid], metadata: { left, right, mid } };\n      \n      // Recursively sort left half\n      yield* this.mergeSortTrace(array, left, mid);\n      \n      // Recursively sort right half\n      yield* this.mergeSortTrace(array, mid + 1, right);\n      \n      // Merge the sorted halves\n      yield* this.mergeTrace(array, left, mid, right);\n    } else if (left === right) {\n      // Single element is sorted\n      yield { type: 'mark', indices: [left], state: 'sorted' };\n    }\n  }\n\n  private *mergeTrace(array: number[], left: number, mid: number, right: number): Generator<Operation> {\n    const leftArray = array.slice(left, mid + 1);\n    const rightArray = array.slice(mid + 1, right + 1);\n    \n    let i = 0, j = 0, k = left;\n    \n    // Mark the range being merged\n    yield { type: 'mark', indices: Array.from({ length: right - left + 1 }, (_, idx) => left + idx), state: 'active' };\n    \n    while (i < leftArray.length && j < rightArray.length) {\n      // Compare elements\n      yield { type: 'compare', indices: [left + i, mid + 1 + j], values: [leftArray[i], rightArray[j]] };\n      \n      if (leftArray[i] <= rightArray[j]) {\n        array[k] = leftArray[i];\n        yield { type: 'swap', indices: [k], values: [leftArray[i]] };\n        i++;\n      } else {\n        array[k] = rightArray[j];\n        yield { type: 'swap', indices: [k], values: [rightArray[j]] };\n        j++;\n      }\n      k++;\n    }\n    \n    // Copy remaining elements from left array\n    while (i < leftArray.length) {\n      array[k] = leftArray[i];\n      yield { type: 'swap', indices: [k], values: [leftArray[i]] };\n      i++;\n      k++;\n    }\n    \n    // Copy remaining elements from right array\n    while (j < rightArray.length) {\n      array[k] = rightArray[j];\n      yield { type: 'swap', indices: [k], values: [rightArray[j]] };\n      j++;\n      k++;\n    }\n    \n    // Mark the merged range as sorted\n    yield { type: 'mark', indices: Array.from({ length: right - left + 1 }, (_, idx) => left + idx), state: 'sorted' };\n  }\n}\n","import { Algorithm } from '../types/algorithm';\nimport { MergeSort } from './mergeSort';\n\nexport const algorithms: Record<string, Algorithm> = {\n  mergeSort: new MergeSort(),\n};\n\nexport const getAlgorithm = (name: string): Algorithm | undefined => {\n  return algorithms[name];\n};\n\nexport const getAvailableAlgorithms = (): string[] => {\n  return Object.keys(algorithms);\n};\n","import { Operation } from '../types/algorithm';\nimport { PlayerState, PlayerControls, PlayerMetrics } from './types';\n\nexport class AlgorithmPlayer implements PlayerControls {\n  private state: PlayerState;\n  private animationFrameId: number | null = null;\n  private lastFrameTime: number = 0;\n  private onStateChange: (state: PlayerState) => void;\n  private onMetricsChange: (metrics: PlayerMetrics) => void;\n\n  constructor(\n    onStateChange: (state: PlayerState) => void,\n    onMetricsChange: (metrics: PlayerMetrics) => void\n  ) {\n    this.onStateChange = onStateChange;\n    this.onMetricsChange = onMetricsChange;\n    \n    this.state = {\n      isPlaying: false,\n      currentStep: 0,\n      totalSteps: 0,\n      speed: 1,\n      operations: [],\n      currentArray: [],\n      originalArray: []\n    };\n  }\n\n  setArray(array: number[]): void {\n    this.state.originalArray = [...array];\n    this.state.currentArray = [...array];\n    this.state.operations = [];\n    this.state.currentStep = 0;\n    this.state.totalSteps = 0;\n    this.updateState();\n  }\n\n  setOperations(operations: Operation[]): void {\n    this.state.operations = operations;\n    this.state.totalSteps = operations.length;\n    this.state.currentStep = 0;\n    this.updateState();\n  }\n\n  play(): void {\n    if (this.state.currentStep >= this.state.totalSteps) {\n      this.reset();\n    }\n    \n    this.state.isPlaying = true;\n    this.lastFrameTime = performance.now();\n    this.animate();\n    this.updateState();\n  }\n\n  pause(): void {\n    this.state.isPlaying = false;\n    if (this.animationFrameId) {\n      cancelAnimationFrame(this.animationFrameId);\n      this.animationFrameId = null;\n    }\n    this.updateState();\n  }\n\n  reset(): void {\n    this.pause();\n    this.state.currentStep = 0;\n    this.state.currentArray = [...this.state.originalArray];\n    this.updateState();\n    this.updateMetrics();\n  }\n\n  stepForward(): void {\n    if (this.state.currentStep < this.state.totalSteps) {\n      this.executeStep(this.state.currentStep);\n      this.state.currentStep++;\n      this.updateState();\n      this.updateMetrics();\n    }\n  }\n\n  stepBackward(): void {\n    if (this.state.currentStep > 0) {\n      this.state.currentStep--;\n      this.revertToStep(this.state.currentStep);\n      this.updateState();\n      this.updateMetrics();\n    }\n  }\n\n  setSpeed(speed: number): void {\n    this.state.speed = Math.max(0.25, Math.min(4, speed));\n    this.updateState();\n  }\n\n  private animate(): void {\n    if (!this.state.isPlaying) return;\n\n    const currentTime = performance.now();\n    const deltaTime = currentTime - this.lastFrameTime;\n    const stepInterval = 1000 / this.state.speed; // milliseconds per step\n\n    if (deltaTime >= stepInterval) {\n      if (this.state.currentStep < this.state.totalSteps) {\n        this.stepForward();\n        this.lastFrameTime = currentTime;\n      } else {\n        this.pause();\n        return;\n      }\n    }\n\n    this.animationFrameId = requestAnimationFrame(() => this.animate());\n  }\n\n  private executeStep(stepIndex: number): void {\n    if (stepIndex >= this.state.operations.length) return;\n\n    const operation = this.state.operations[stepIndex];\n    this.applyOperation(operation);\n  }\n\n  private applyOperation(operation: Operation): void {\n    switch (operation.type) {\n      case 'swap':\n        if (operation.indices.length === 1 && operation.values && operation.values.length === 1) {\n          this.state.currentArray[operation.indices[0]] = operation.values[0];\n        }\n        break;\n      case 'mark':\n        // Marking is handled by the renderer, no array changes needed\n        break;\n      case 'compare':\n        // Comparison is handled by the renderer, no array changes needed\n        break;\n      case 'merge':\n        // Merge operations update the array\n        if (operation.values) {\n          operation.indices.forEach((index, i) => {\n            if (operation.values && operation.values[i] !== undefined) {\n              this.state.currentArray[index] = operation.values[i];\n            }\n          });\n        }\n        break;\n      case 'split':\n        // Split operations don't change the array\n        break;\n    }\n  }\n\n  private revertToStep(stepIndex: number): void {\n    // Reset to original array and replay operations up to stepIndex\n    this.state.currentArray = [...this.state.originalArray];\n    \n    for (let i = 0; i < stepIndex; i++) {\n      this.executeStep(i);\n    }\n  }\n\n  private updateState(): void {\n    this.onStateChange({ ...this.state });\n  }\n\n  private updateMetrics(): void {\n    const metrics: PlayerMetrics = {\n      comparisons: this.countOperations('compare'),\n      swaps: this.countOperations('swap'),\n      elapsedTime: this.state.currentStep,\n      currentStep: this.state.currentStep,\n      totalSteps: this.state.totalSteps\n    };\n    \n    this.onMetricsChange(metrics);\n  }\n\n  private countOperations(type: Operation['type']): number {\n    return this.state.operations\n      .slice(0, this.state.currentStep)\n      .filter(op => op.type === type).length;\n  }\n\n  getState(): PlayerState {\n    return { ...this.state };\n  }\n\n  destroy(): void {\n    this.pause();\n  }\n}\n","import { Renderer, RendererConfig } from './types';\nimport { Operation } from '../types/algorithm';\n\nexport class SVGRenderer implements Renderer {\n  private svg: SVGElement;\n  private config: RendererConfig;\n  private barElements: SVGElement[] = [];\n\n  constructor(container: HTMLElement, config: RendererConfig) {\n    this.config = config;\n    this.svg = this.createSVG();\n    container.appendChild(this.svg);\n  }\n\n  private createSVG(): SVGElement {\n    const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n    svg.setAttribute('width', this.config.width.toString());\n    svg.setAttribute('height', this.config.height.toString());\n    svg.style.display = 'block';\n    svg.style.margin = '0 auto';\n    return svg;\n  }\n\n  render(array: number[], operations: Operation[], currentStep: number): void {\n    this.clearBars();\n    this.createBars(array);\n    this.applyOperations(operations, currentStep);\n  }\n\n  private clearBars(): void {\n    this.barElements.forEach(bar => bar.remove());\n    this.barElements = [];\n  }\n\n  private createBars(array: number[]): void {\n    const maxValue = Math.max(...array);\n    const barHeight = this.config.height * 0.8;\n    \n    array.forEach((value, index) => {\n      const bar = document.createElementNS('http://www.w3.org/2000/svg', 'rect');\n      const x = index * (this.config.barWidth + this.config.barSpacing);\n      const height = (value / maxValue) * barHeight;\n      const y = this.config.height - height;\n      \n      bar.setAttribute('x', x.toString());\n      bar.setAttribute('y', y.toString());\n      bar.setAttribute('width', this.config.barWidth.toString());\n      bar.setAttribute('height', height.toString());\n      bar.setAttribute('fill', this.config.colors.default);\n      bar.setAttribute('stroke', '#333');\n      bar.setAttribute('stroke-width', '1');\n      \n      // Add value label\n      const label = document.createElementNS('http://www.w3.org/2000/svg', 'text');\n      label.setAttribute('x', (x + this.config.barWidth / 2).toString());\n      label.setAttribute('y', (y - 5).toString());\n      label.setAttribute('text-anchor', 'middle');\n      label.setAttribute('font-size', '12');\n      label.setAttribute('fill', '#333');\n      label.textContent = value.toString();\n      \n      this.svg.appendChild(bar);\n      this.svg.appendChild(label);\n      this.barElements.push(bar);\n    });\n  }\n\n  private applyOperations(operations: Operation[], currentStep: number): void {\n    // Reset all bars to default color\n    this.barElements.forEach(bar => {\n      bar.setAttribute('fill', this.config.colors.default);\n    });\n\n    // Apply operations up to current step\n    for (let i = 0; i < currentStep && i < operations.length; i++) {\n      const operation = operations[i];\n      this.applyOperation(operation);\n    }\n  }\n\n  private applyOperation(operation: Operation): void {\n    switch (operation.type) {\n      case 'compare':\n        operation.indices.forEach(index => {\n          if (this.barElements[index]) {\n            this.barElements[index].setAttribute('fill', this.config.colors.comparing);\n          }\n        });\n        break;\n      \n      case 'swap':\n        operation.indices.forEach(index => {\n          if (this.barElements[index]) {\n            this.barElements[index].setAttribute('fill', this.config.colors.swapping);\n          }\n        });\n        break;\n      \n      case 'mark':\n        operation.indices.forEach(index => {\n          if (this.barElements[index]) {\n            const color = operation.state === 'sorted' \n              ? this.config.colors.sorted \n              : operation.state === 'active'\n              ? this.config.colors.active\n              : this.config.colors.merged;\n            this.barElements[index].setAttribute('fill', color);\n          }\n        });\n        break;\n      \n      case 'merge':\n        operation.indices.forEach(index => {\n          if (this.barElements[index]) {\n            this.barElements[index].setAttribute('fill', this.config.colors.merged);\n          }\n        });\n        break;\n      \n      case 'split':\n        // Split operations are visual markers, no color changes needed\n        break;\n    }\n  }\n\n  resize(width: number, height: number): void {\n    this.config.width = width;\n    this.config.height = height;\n    this.svg.setAttribute('width', width.toString());\n    this.svg.setAttribute('height', height.toString());\n  }\n\n  destroy(): void {\n    this.svg.remove();\n  }\n}\n","export const generateRandomArray = (size: number, min: number = 1, max: number = 100): number[] => {\n  return Array.from({ length: size }, () => Math.floor(Math.random() * (max - min + 1)) + min);\n};\n\nexport const generateSortedArray = (size: number, min: number = 1, max: number = 100): number[] => {\n  return generateRandomArray(size, min, max).sort((a, b) => a - b);\n};\n\nexport const generateReversedArray = (size: number, min: number = 1, max: number = 100): number[] => {\n  return generateSortedArray(size, min, max).reverse();\n};\n\nexport const generateNearlySortedArray = (size: number, min: number = 1, max: number = 100, swaps: number = 3): number[] => {\n  const array = generateSortedArray(size, min, max);\n  \n  for (let i = 0; i < swaps; i++) {\n    const idx1 = Math.floor(Math.random() * size);\n    const idx2 = Math.floor(Math.random() * size);\n    [array[idx1], array[idx2]] = [array[idx2], array[idx1]];\n  }\n  \n  return array;\n};\n\nexport const generateArrayWithDuplicates = (size: number, min: number = 1, max: number = 50): number[] => {\n  const uniqueValues = Math.min(max - min + 1, Math.floor(size / 2));\n  const baseArray = generateRandomArray(uniqueValues, min, max);\n  \n  const result: number[] = [];\n  for (let i = 0; i < size; i++) {\n    result.push(baseArray[i % uniqueValues]);\n  }\n  \n  // Shuffle the result\n  for (let i = result.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [result[i], result[j]] = [result[j], result[i]];\n  }\n  \n  return result;\n};\n","import React, { useEffect, useRef, useState, useCallback } from 'react';\nimport { getAlgorithm, getAvailableAlgorithms } from '../algorithms';\nimport { AlgorithmPlayer } from '../player/player';\nimport { SVGRenderer } from '../renderers/svgRenderer';\nimport { PlayerState, PlayerMetrics } from '../player/types';\nimport { Operation } from '../types/algorithm';\nimport { \n  generateRandomArray, \n  generateSortedArray, \n  generateReversedArray, \n  generateNearlySortedArray, \n  generateArrayWithDuplicates \n} from '../utils/arrayGenerators';\n\nconst AlgorithmVisualizerContainer: React.FC = () => {\n  const [selectedAlgorithm, setSelectedAlgorithm] = useState<string>('mergeSort');\n  const [arraySize, setArraySize] = useState<number>(20);\n  const [currentArray, setCurrentArray] = useState<number[]>([]);\n  const [playerState, setPlayerState] = useState<PlayerState | null>(null);\n  const [metrics, setMetrics] = useState<PlayerMetrics | null>(null);\n  const [isGenerating, setIsGenerating] = useState<boolean>(false);\n\n  const containerRef = useRef<HTMLDivElement>(null);\n  const playerRef = useRef<AlgorithmPlayer | null>(null);\n  const rendererRef = useRef<SVGRenderer | null>(null);\n\n  // Initialize renderer\n  useEffect(() => {\n    if (containerRef.current && !rendererRef.current) {\n      const config = {\n        width: 800,\n        height: 400,\n        barWidth: 30,\n        barSpacing: 5,\n        colors: {\n          default: '#4a90e2',\n          active: '#f39c12',\n          sorted: '#27ae60',\n          comparing: '#e74c3c',\n          swapping: '#9b59b6',\n          merged: '#2ecc71'\n        }\n      };\n      \n      rendererRef.current = new SVGRenderer(containerRef.current, config);\n    }\n\n    return () => {\n      rendererRef.current?.destroy();\n    };\n  }, []);\n\n  // Initialize player\n  useEffect(() => {\n    if (!playerRef.current) {\n      playerRef.current = new AlgorithmPlayer(\n        (state) => setPlayerState(state),\n        (metrics) => setMetrics(metrics)\n      );\n    }\n\n    return () => {\n      playerRef.current?.destroy();\n    };\n  }, []);\n\n  // Generate initial array\n  useEffect(() => {\n    generateArray();\n  }, [arraySize]);\n\n  // Generate random array\n  const generateArray = useCallback(() => {\n    setIsGenerating(true);\n    const array = Array.from({ length: arraySize }, () => \n      Math.floor(Math.random() * 100) + 1\n    );\n    setCurrentArray(array);\n    \n    if (playerRef.current) {\n      playerRef.current.setArray(array);\n      generateAlgorithmTrace(array);\n    }\n    setIsGenerating(false);\n  }, [arraySize]);\n\n  // Generate algorithm trace\n  const generateAlgorithmTrace = useCallback((array: number[]) => {\n    const algorithm = getAlgorithm(selectedAlgorithm);\n    if (!algorithm || !playerRef.current) return;\n\n    const errors = algorithm.validate({ array });\n    if (errors.length > 0) {\n      console.error('Validation errors:', errors);\n      return;\n    }\n\n    const operations: Operation[] = [];\n    for (const operation of algorithm.trace({ array })) {\n      operations.push(operation);\n    }\n\n    playerRef.current.setOperations(operations);\n  }, [selectedAlgorithm]);\n\n  // Handle algorithm change\n  const handleAlgorithmChange = useCallback((algorithmName: string) => {\n    setSelectedAlgorithm(algorithmName);\n    if (playerRef.current && currentArray.length > 0) {\n      generateAlgorithmTrace(currentArray);\n    }\n  }, [currentArray, generateAlgorithmTrace]);\n\n  // Handle array size change\n  const handleArraySizeChange = useCallback((size: number) => {\n    setArraySize(size);\n  }, []);\n\n  // Player controls\n  const handlePlay = useCallback(() => {\n    playerRef.current?.play();\n  }, []);\n\n  const handlePause = useCallback(() => {\n    playerRef.current?.pause();\n  }, []);\n\n  const handleReset = useCallback(() => {\n    playerRef.current?.reset();\n  }, []);\n\n  const handleStepForward = useCallback(() => {\n    playerRef.current?.stepForward();\n  }, []);\n\n  const handleStepBackward = useCallback(() => {\n    playerRef.current?.stepBackward();\n  }, []);\n\n  const handleSpeedChange = useCallback((speed: number) => {\n    playerRef.current?.setSpeed(speed);\n  }, []);\n\n  // Update renderer when state changes\n  useEffect(() => {\n    if (rendererRef.current && playerState && currentArray.length > 0) {\n      rendererRef.current.render(\n        playerState.currentArray,\n        playerState.operations,\n        playerState.currentStep\n      );\n    }\n  }, [playerState, currentArray]);\n\n  // Keyboard shortcuts\n  useEffect(() => {\n    const handleKeyPress = (event: KeyboardEvent) => {\n      switch (event.key) {\n        case ' ':\n          event.preventDefault();\n          if (playerState?.isPlaying) {\n            handlePause();\n          } else {\n            handlePlay();\n          }\n          break;\n        case 'ArrowRight':\n          event.preventDefault();\n          handleStepForward();\n          break;\n        case 'ArrowLeft':\n          event.preventDefault();\n          handleStepBackward();\n          break;\n        case 'r':\n        case 'R':\n          event.preventDefault();\n          handleReset();\n          break;\n      }\n    };\n\n    window.addEventListener('keydown', handleKeyPress);\n    return () => window.removeEventListener('keydown', handleKeyPress);\n  }, [playerState, handlePlay, handlePause, handleStepForward, handleStepBackward, handleReset]);\n\n  return (\n    <div className=\"algorithm-visualizer\">\n      <div className=\"controls-panel\">\n        <div className=\"control-group\">\n          <label htmlFor=\"algorithm-select\">Algorithm:</label>\n          <select\n            id=\"algorithm-select\"\n            value={selectedAlgorithm}\n            onChange={(e) => handleAlgorithmChange(e.target.value)}\n          >\n            {getAvailableAlgorithms().map(name => (\n              <option key={name} value={name}>\n                {name.charAt(0).toUpperCase() + name.slice(1).replace(/([A-Z])/g, ' $1')}\n              </option>\n            ))}\n          </select>\n        </div>\n\n        <div className=\"control-group\">\n          <label htmlFor=\"array-size\">Array Size:</label>\n          <input\n            id=\"array-size\"\n            type=\"range\"\n            min=\"5\"\n            max=\"100\"\n            value={arraySize}\n            onChange={(e) => handleArraySizeChange(parseInt(e.target.value))}\n          />\n          <span>{arraySize}</span>\n        </div>\n\n        <div className=\"control-group\">\n          <label htmlFor=\"array-pattern\">Pattern:</label>\n          <select\n            id=\"array-pattern\"\n            value=\"random\"\n            onChange={(e) => {\n              const pattern = e.target.value;\n              let newArray: number[];\n              switch (pattern) {\n                case 'sorted':\n                  newArray = generateSortedArray(arraySize);\n                  break;\n                case 'reversed':\n                  newArray = generateReversedArray(arraySize);\n                  break;\n                case 'nearly-sorted':\n                  newArray = generateNearlySortedArray(arraySize);\n                  break;\n                case 'duplicates':\n                  newArray = generateArrayWithDuplicates(arraySize);\n                  break;\n                default:\n                  newArray = generateRandomArray(arraySize);\n              }\n              setCurrentArray(newArray);\n              if (playerRef.current) {\n                playerRef.current.setArray(newArray);\n                generateAlgorithmTrace(newArray);\n              }\n            }}\n          >\n            <option value=\"random\">Random</option>\n            <option value=\"sorted\">Sorted</option>\n            <option value=\"reversed\">Reversed</option>\n            <option value=\"nearly-sorted\">Nearly Sorted</option>\n            <option value=\"duplicates\">With Duplicates</option>\n          </select>\n        </div>\n\n        <div className=\"control-group\">\n          <button onClick={generateArray} disabled={isGenerating}>\n            {isGenerating ? 'Generating...' : 'Generate New Array'}\n          </button>\n        </div>\n      </div>\n\n      <div className=\"visualization-container\" ref={containerRef} />\n\n      <div className=\"playback-controls\">\n        <div className=\"control-group\">\n          <button onClick={handleStepBackward} disabled={!playerState || playerState.currentStep === 0}>\n            ⏮\n          </button>\n          <button onClick={playerState?.isPlaying ? handlePause : handlePlay}>\n            {playerState?.isPlaying ? '⏸' : '▶'}\n          </button>\n          <button onClick={handleStepForward} disabled={!playerState || playerState.currentStep >= (playerState?.totalSteps || 0)}>\n            ⏭\n          </button>\n          <button onClick={handleReset}>🔄</button>\n        </div>\n\n        <div className=\"control-group\">\n          <label htmlFor=\"speed-slider\">Speed:</label>\n          <input\n            id=\"speed-slider\"\n            type=\"range\"\n            min=\"0.25\"\n            max=\"4\"\n            step=\"0.25\"\n            value={playerState?.speed || 1}\n            onChange={(e) => handleSpeedChange(parseFloat(e.target.value))}\n          />\n          <span>{playerState?.speed || 1}x</span>\n        </div>\n      </div>\n\n      {metrics && (\n        <div className=\"metrics-panel\">\n          <div className=\"metric\">\n            <span className=\"metric-label\">Step:</span>\n            <span className=\"metric-value\">{metrics.currentStep} / {metrics.totalSteps}</span>\n          </div>\n          <div className=\"metric\">\n            <span className=\"metric-label\">Comparisons:</span>\n            <span className=\"metric-value\">{metrics.comparisons}</span>\n          </div>\n          <div className=\"metric\">\n            <span className=\"metric-label\">Swaps:</span>\n            <span className=\"metric-value\">{metrics.swaps}</span>\n          </div>\n        </div>\n      )}\n\n      {selectedAlgorithm && (\n        <div className=\"algorithm-info-panel\">\n          <h3>Algorithm Information</h3>\n          <div className=\"algorithm-details\">\n            <div className=\"detail-item\">\n              <strong>Name:</strong> {getAlgorithm(selectedAlgorithm)?.metadata.name}\n            </div>\n            <div className=\"detail-item\">\n              <strong>Description:</strong> {getAlgorithm(selectedAlgorithm)?.metadata.description}\n            </div>\n            <div className=\"detail-item\">\n              <strong>Time Complexity:</strong> \n              <span className=\"complexity\">\n                Best: {getAlgorithm(selectedAlgorithm)?.metadata.timeComplexity.best} | \n                Average: {getAlgorithm(selectedAlgorithm)?.metadata.timeComplexity.average} | \n                Worst: {getAlgorithm(selectedAlgorithm)?.metadata.timeComplexity.worst}\n              </span>\n            </div>\n            <div className=\"detail-item\">\n              <strong>Space Complexity:</strong> {getAlgorithm(selectedAlgorithm)?.metadata.spaceComplexity}\n            </div>\n            <div className=\"detail-item\">\n              <strong>Stable:</strong> {getAlgorithm(selectedAlgorithm)?.metadata.stable ? 'Yes' : 'No'}\n            </div>\n            <div className=\"detail-item\">\n              <strong>In-Place:</strong> {getAlgorithm(selectedAlgorithm)?.metadata.inPlace ? 'Yes' : 'No'}\n            </div>\n          </div>\n        </div>\n      )}\n\n      <div className=\"help-panel\">\n        <h3>How to Use</h3>\n        <ul>\n          <li><strong>Space:</strong> Play/Pause</li>\n          <li><strong>←/→:</strong> Step backward/forward</li>\n          <li><strong>R:</strong> Reset</li>\n          <li><strong>Speed slider:</strong> Adjust animation speed</li>\n        </ul>\n        <p>Watch how the algorithm divides the array, sorts subarrays, and merges them back together!</p>\n      </div>\n    </div>\n  );\n};\n\nexport default AlgorithmVisualizerContainer;\n","import React from 'react'\nimport ReactDOM from 'react-dom/client'\nimport AlgorithmVisualizerContainer from './components/AlgorithmVisualizer'\nimport './index.css'\n\nReactDOM.createRoot(document.getElementById('root')!).render(\n  <React.StrictMode>\n    <AlgorithmVisualizerContainer />\n  </React.StrictMode>,\n)\n"],"names":["f","require$$0","k","l","m","n","p","a","g","b","d","e","h","reactJsxRuntime_production_min","jsxRuntimeModule","client","MergeSort","__publicField","input","errors","val","array","left","right","mid","leftArray","rightArray","i","j","_","idx","algorithms","getAlgorithm","name","getAvailableAlgorithms","AlgorithmPlayer","onStateChange","onMetricsChange","operations","speed","currentTime","deltaTime","stepInterval","stepIndex","operation","index","metrics","type","op","SVGRenderer","container","config","svg","currentStep","bar","maxValue","barHeight","value","x","height","y","label","color","width","generateRandomArray","size","min","max","generateSortedArray","generateReversedArray","generateNearlySortedArray","swaps","idx1","idx2","generateArrayWithDuplicates","uniqueValues","baseArray","result","AlgorithmVisualizerContainer","selectedAlgorithm","setSelectedAlgorithm","useState","arraySize","setArraySize","currentArray","setCurrentArray","playerState","setPlayerState","setMetrics","isGenerating","setIsGenerating","containerRef","useRef","playerRef","rendererRef","useEffect","_a","state","generateArray","useCallback","generateAlgorithmTrace","algorithm","handleAlgorithmChange","algorithmName","handleArraySizeChange","handlePlay","handlePause","handleReset","handleStepForward","handleStepBackward","handleSpeedChange","handleKeyPress","event","jsxs","jsx","pattern","newArray","_b","_c","_d","_e","_f","_g","_h","ReactDOM","React"],"mappings":"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","x_google_ignoreList":[0,1,2]}